#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0413,R0903,W0105


"main"


import inspect
import os
import queue
import sys
import termios
import threading
import time
import _thread


sys.path.insert(0, os.getcwd())


from obx.cfg    import Config
from obx.dft    import Default
from obx.disk   import Persist, skel
from obx.object import Object, keys, register


if os.path.exists("mods"):
    import mods as MODS
    from mods.utils import laps
else:
    MODS = None


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()


Cfg         = Default()
Cfg.debug   = True
Cfg.mod     = ""
Cfg.name    = "tinder"
Cfg.silent  = False
Cfg.skip    = ["debug",]
Cfg.wdr     = ".test"


Persist.workdir = Cfg.wdr


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dpl = ["hnrss title,url"]
param.fnd = ["log", "todo", "rss", "config"]
param.imp = ["ttests/feeds.opml"]
param.log = ["bla"]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews"]
param.pwd = ["bla mekker"]
param.rem = ["hnrss"]
param.res = [""]
param.rss = ["http://hnrss.org/newest",]
param.tdo = ["mekker"]
param.ver = [""]


class Commands:

    "Commands"

    cmds     = Object()
    modnames = Object()


class Handler:

    "Handler"

    def __init__(self):
        self.cbs      = Object()
        self.queue    = queue.Queue()
        self.stopped  = threading.Event()

    def callback(self, evt):
        "call callback based on event type."
        evt.orig = repr(self)
        func = getattr(self.cbs, evt.type, None)
        if not func:
            return
        func(self, evt)

    def loop(self):
        "proces events until interrupted."
        while not self.stopped.is_set():
            try:
                evt = self.poll()
                self.callback(evt)
            except (KeyboardInterrupt, EOFError):
                _thread.interrupt_main()

    def poll(self):
        "function to return event."
        return self.queue.get()

    def put(self, evt):
        "put event into the queue."
        self.queue.put_nowait(evt)


class Client(Handler):

    "client"

    cache = Object()

    def __init__(self):
        Handler.__init__(self)
        register(self.cbs, "command", command)

    def announce(self, txt):
        "echo text"
        self.raw(txt)

    def poll(self):
        "poll console and create event."
        evt = Event()
        evt.txt = input("> ")
        evt.type = "command"
        return evt

    def raw(self, txt):
        "print to screen."
        txt = txt.encode('utf-8', 'replace').decode()
        print(txt)

    def say(self, _channel, txt):
        "echo on verbose."
        self.raw(txt)

    def show(self, evt):
        "show results into a channel."
        for txt in evt.result:
            self.say(evt.channel, txt)


class Event(Default):

    "Event"

    def __init__(self):
        Default.__init__(self)
        self.orig    = ""
        self.result  = []
        self.txt     = ""
        self.type    = "command"

    def reply(self, txt):
        "add text to the result"
        self.result.append(txt)


"utilities"


def add(func):
    "add command."
    register(Commands.cmds, func.__name__, func)
    if func.__module__ != "__main__":
        register(Commands.modnames, func.__name__, func.__module__)


def modnames(*args):
    "return module names."
    res = []
    for arg in args:
        res.extend([x for x in dir(arg) if not x.startswith("__")])
    return sorted(res)


def parse(obj, txt=None):
    "parse a string for a command."
    args = []
    obj.args    = obj.args or []
    obj.cmd     = obj.cmd or ""
    obj.gets    = obj.gets or Default()
    obj.hasmods = obj.hasmod or False
    obj.index   = None
    obj.mod     = obj.mod or ""
    obj.opts    = obj.opts or ""
    obj.result  = obj.reult or []
    obj.sets    = obj.sets or Default()
    obj.txt     = txt or obj.txt or ""
    obj.otxt    = obj.txt
    _nr = -1
    for spli in obj.otxt.split():
        if spli.startswith("-"):
            try:
                obj.index = int(spli[1:])
            except ValueError:
                obj.opts += spli[1:]
            continue
        if "==" in spli:
            key, value = spli.split("==", maxsplit=1)
            if key in obj.gets:
                val = getattr(obj.gets, key)
                value = val + "," + value
            setattr(obj.gets, key, value)
            continue
        if "=" in spli:
            key, value = spli.split("=", maxsplit=1)
            if key == "mod":
                obj.hasmods = True
                if obj.mod:
                    obj.mod += f",{value}"
                else:
                    obj.mod = value
                continue
            setattr(obj.sets, key, value)
            continue
        _nr += 1
        if _nr == 0:
            obj.cmd = spli
            continue
        args.append(spli)
    if args:
        obj.args = args
        obj.txt  = obj.cmd or ""
        obj.rest = " ".join(obj.args)
        obj.txt  = obj.cmd + " " + obj.rest
    else:
        obj.txt = obj.cmd or ""


def scan(modstr, *pkgs, disable=""):
    "scan modules for commands and classes"
    mds = []
    for modname in spl(modstr):
        if skip(modname, disable):
            continue
        for pkg in pkgs:
            module = getattr(pkg, modname, None)
            if not module:
                continue
            scancmd(module)
    return mds


def scancmd(mod) -> None:
    "scan module for commands."
    for key, cmnd in inspect.getmembers(mod, inspect.isfunction):
        if key.startswith("cb"):
            continue
        if 'event' in cmnd.__code__.co_varnames:
            add(cmnd)

def skip(name, skipp):
    "check for skipping"
    for skp in spl(skipp):
        if skp in name:
            return True
    return False


def spl(txt):
    "split comma separated string into a list."
    try:
        res = txt.split(',')
    except (TypeError, ValueError):
        res = txt
    return [x for x in res if x]



def wrap(func):
    "reset terminal."
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


"callbacks"


def command(bot, evt):
    "check for and run a command."
    parse(evt)
    func = getattr(Commands.cmds, evt.cmd, None)
    if func:
        func(evt)
        bot.show(evt)


"commands"


def cmd(event):
    "list commands."
    event.reply(",".join(sorted(keys(Commands.cmds))))


def consume(evts):
    "wait for events."
    fixed = []
    res = []
    for evt in evts:
        res.append(evt.wait())
        fixed.append(evt)
    for fff in fixed:
        try:
            evts.remove(fff)
        except ValueError:
            continue
    return res


def payload(clt):
    "do payload."
    cmdz = sorted(list(keys(Commands.cmds)))
    with paylock:
        nmr = 0
        for cmdd in cmdz:
            for ex in getattr(param, cmdd, [""]):
                evt = Event()
                evt.channel = "#objr"
                evt.orig = repr(clt)
                evt.txt = cmdd + " " + ex
                evt.type = "command"
                clt.put(evt)
                events.append(evt)
                nmr += 1
        return nmr


def wrap(function):
    "reset terminal."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    "main"
    Cfg.dis = Cfg.sets.dis
    Cfg.mod = ",".join(modnames(MODS))
    if "v" in Cfg.opts:
        dte = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        print(f'{dte} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    scan(Cfg.mod, MODS)
    nrs = Cfg.index or 1
    nrcommand = len(Commands.cmds) or 1
    clt = Client()
    clt.threaded = "t" in Cfg.opts
    thrs = []
    for _nr in range(nrs):
        payload(clt)
    #consume(events)
    endtime = time.time()
    lap = laps(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "v" in Cfg.opts:
        print(f"{lap} {nrs} {nrcommand} {percall}")


if __name__ == "__main__":
    parse(Cfg, " ".join(sys.argv[1:]))
    if "f" in Cfg.opts:
        if os.path.exists(Persist.workdir):
            shutil.rmtree(Persist.workdir)
    skel()
    if "p" in Cfg.opts:
        profile.runctx(main.__code__, globals(), locals())
    else:
        wrap(main)
    sys.exit()
